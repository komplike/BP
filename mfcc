from scipy.io import wavfile
import numpy as np
from scipy.fftpack import dct
import os
from os.path import splitext
from pathlib import Path
import glob

import matplotlib.pyplot as plt


def read_vaw(path, name):
    sample_rate, signal = wavfile.read(path + name)
    return sample_rate, signal


def preemph(signal, pre_emphasis):
    emphasized_signal = np.append(signal[0], signal[1:] - pre_emphasis * signal[:-1])
    return emphasized_signal


def toFrames(signal, sample_rate, frame_size, frame_hop):
    frame_length = frame_size * sample_rate
    frame_step = frame_hop * sample_rate

    signal_length = len(signal)
    frame_length = int(round(frame_length))
    frame_step = int(round(frame_step))
    num_frames = int(np.ceil(float(np.abs(signal_length - frame_length)) / frame_step))
    # add zero padding to have the same length of each frame
    pad_signal_length = num_frames * frame_step + frame_length
    z = np.zeros((pad_signal_length - signal_length))
    pad_signal = np.append(signal, z)
    # index frames
    indices = np.tile(np.arange(0, frame_length), (num_frames, 1)) + np.tile(np.arange(0, num_frames * frame_step, frame_step), (frame_length, 1)).T
    # change type to int and disable reallocation
    frames = pad_signal[indices.astype(np.int32, copy=False)]
    return frames, frame_length


def applyHamming(frames, frame_length):
    frames *= np.hamming(frame_length)
    return frames


def applyFourier(frames, NFFT):
    mag_frames = np.absolute(np.fft.rfft(frames, NFFT))  # Magnitude of the FFT
    pow_frames = ((1.0 / NFFT) * ((mag_frames) ** 2))  # Power Spectrum
    return pow_frames


def filter_bank(nfilt, NFFT, sample_rate, pow_frames):
    low_freq_mel = 20
    high_freq_mel = (2595 * np.log10(1 + (sample_rate / 2) / 700))  # Convert Hz to Mel
    mel_points = np.linspace(low_freq_mel, high_freq_mel, nfilt + 2)  # Equally spaced in Mel scale
    hz_points = (700 * (10**(mel_points / 2595) - 1))  # Convert Mel to Hz
    bin = np.floor((NFFT + 1) * hz_points / sample_rate)

    fbank = np.zeros((nfilt, int(np.floor(NFFT / 2 + 1))))
    for m in range(1, nfilt + 1):
        f_m_minus = int(bin[m - 1])   # left
        f_m = int(bin[m])             # center
        f_m_plus = int(bin[m + 1])    # right

        for k in range(f_m_minus, f_m):
            fbank[m - 1, k] = (k - bin[m - 1]) / (bin[m] - bin[m - 1])
        for k in range(f_m, f_m_plus):
            fbank[m - 1, k] = (bin[m + 1] - k) / (bin[m + 1] - bin[m])
    filter_banks = np.dot(pow_frames, fbank.T)
    filter_banks = np.where(filter_banks == 0, np.finfo(float).eps, filter_banks)  # Numerical Stability
    filter_banks = 20 * np.log10(filter_banks)  # dB
    return filter_banks


def applyDCT(num_ceps, filter_banks):
    mfcc = dct(filter_banks, type=2, axis=1, norm='ortho')[:, 1: (num_ceps + 1)]  # Keep 2-13
    return mfcc


def noise_init(mfcc):
    # print(type(mfcc), len(mfcc), mfcc.shape)
    # print(mfcc)
    noise = np.mean(mfcc, axis=0)
    # print(noise)
    # exit()
    return noise


def singleFile(path, file):
    sample_rate, signal = read_vaw(path, file)
    emph_signal = preemph(signal, 0.95)
    frame_size = 0.025
    frame_hop = 0.015
    frames, frame_length = toFrames(emph_signal, sample_rate, frame_size, frame_hop)
    frames = applyHamming(frames, frame_length)
    pow_frames = applyFourier(frames, 512)
    # plotMFCC(pow_frames)
    filter_banks = filter_bank(23, 512, sample_rate, pow_frames)  # number of filters, number of fft

    filter_banks -= (np.mean(filter_banks, axis=0) + 1e-8)
    mfcc = applyDCT(23, filter_banks)  # number of CC
    # plotMFCC(filter_banks)
    # (nframes, ncoeff) = mfcc.shape
    # n = np.arange(ncoeff)
    # cep_lifter = 23
    # lift = 1 + (cep_lifter / 2) * np.sin(np.pi * n / cep_lifter)
    # mfcc *= lift  # *
    # mfcc -= (np.mean(mfcc, axis=0) + 1e-8)
    print("Mfcc: ", type(mfcc), len(mfcc), mfcc.shape)
    exit()
    # plotMFCC(mfcc)
    # n = noise_init(mfcc[:5][:])  # number of first noise frames
    return mfcc, frame_length, frame_hop


def wholeDir(path):
    paths = Path('/home/komplike/bp/nahravky').glob('**/TSK7/*.wav')
    for path in paths:
        mfcc = singleFile(path, splitext(os.path.basename(path)))
        noise = loadNoise()
        mfccVAD(mfcc, noise)


def plot_roc_curve(tpr, fpr):
    plt.plot(fpr, tpr, color='orange', label='ROC')
    plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('ROC Curve of MFCC_VAD')  # Receiver Operating Characteristic (ROC) Curve LRT VAD
    plt.legend()
    plt.show()


def plotMFCC(mfcc):
    mfcc = np.transpose(mfcc)
    mfcc_cut = np.array([x[:100] for x in mfcc], dtype=float)
    plt.matshow(mfcc_cut)
    plt.xlabel('frames')
    plt.ylabel('power')
    plt.title("spectrum")
    # savefig("mfcc")
    plt.show()
    exit()


def vad(fname, frames, frame_len, frame_hop, th):
    # frame_cnt = len(frames)
    # print("vad_frames: ", type(frames), len(frames))

    # th_v = np.arange(30, 40, 10)
    th = 41
    # for th in th_v:
    th_log = []
    fr_log = []
    cnt = 0
    cnt_pataka = 0
    VAD = 0
    f = open("PD_M_02_TSK7.lab", "w+")
    for frame in frames:
        th_log = np.append(th_log, th)
        fr_log = np.append(fr_log, frame)
        cnt += 1
        if frame > th and VAD == 0:
            # print("frame:", frame, " th:", th)
            # exit()
            t_stamp_b = frame_hop * cnt
            VAD = 1
        elif frame < th and VAD == 1:
            t_stamp_e = frame_hop * cnt
            if t_stamp_e - t_stamp_b > 0.1:
                VAD = 0
                cnt_pataka += 1
                if cnt_pataka == 1:
                    f.write(f'{t_stamp_b:.4f} ')
                    f.write(f'{t_stamp_e:.4f} pa\n')
                elif cnt_pataka == 2:
                    f.write(f'{t_stamp_b:.4f} ')
                    f.write(f'{t_stamp_e:.4f} ta\n')
                elif cnt_pataka == 3:
                    f.write(f'{t_stamp_b:.4f} ')
                    f.write(f'{t_stamp_e:.4f} ka\n')
                    cnt_pataka = 0

        th = 0.99 * th + (1 - 0.99) * np.mean(frame)
    f.close()

    plt.plot(np.arange(0, t_stamp_e, 0.01497), fr_log)
    plt.plot(np.arange(0, t_stamp_e, 0.01497), th_log)
    plt.show()
    exit()


def mfccVAD(mfcc, noise, file, frame_len, frame_hop, th):
    distance_vector = []
    # mfcc = mfcc[:, :]
    # cnt = 0
    print(type(mfcc), len(mfcc))
    for frame in mfcc:

        # distance_vector.append(np.mean(frame))
        distance_vector.append(distance(frame, noise))

        # cnt += 1
        # plt.plot(distance_vector[:100])
        # # plt.show()
        # if cnt > 25:
        #     plt.show()
        #     exit()

        # print(dist)
        # if (dist > 0):
        #     voice = 1
        # else:
        #     if (voice == 1):
        #         filewrite = 1
        #     voice = 0
        noise = (0.99 * noise + (1 - 0.99) * frame)
        # noise_vector.append(np.mean(noise))
        # noise_vector.append(distance(0, noise))
        # exit()
    # plt.show()
    print(type(distance_vector), len(distance_vector))
    exit()
    # exit()
    # print(th)
    vad(file, distance_vector, frame_len, frame_hop, th)

    plt.plot(distance_vector)
    plt.plot(th)
    plt.show()
    # plt.figure()

    return 0


def distance(matrix1, matrix2):

    return np.linalg.norm(matrix1 - matrix2, axis=0)


def loadNoise():
    mfcc, frame_length, frame_hop = singleFile("/home/komplike/bp/nahravky/drive/", "noise1s.wav")
    # print("Mfcc: ", type(mfcc), len(mfcc), mfcc.shape)
    # exit()
    # mfcc = mfcc[:, :]
    mean = np.mean(mfcc, axis=0)
    return mean


def ext_mfcc_vad(th):
    mfcc, frame_len, frame_hop = singleFile("/home/komplike/bp/nahravky/drive/PD/TSK7/", "PD_M_01_TSK7.wav")
    mfccVAD(mfcc, loadNoise(), "PD_M_01_TSK7.wav", frame_len, frame_hop, th)


def score_labs(labPath, wavPath, SEG_LEN, SEG_STEP):
    """Function read .lab files
    Return array 'labs' with arrays ["fileName",[values]]
    values: '0' and '1' represents score for voiced and unvoiced segments
    """
    labs = []
    count = 0
    filePath = labPath
    fileName = labPath
    labs.append([fileName, []])
    f_read = open(filePath, "r")
    lines = f_read.readlines()
    prev_end = 0
    for line in lines:

        # add '0' from end of previous time stamp 'prev_end' to 'begin' beginning of new time stamp
        objects = line.split()
        begin = float(objects[0])
        end = float(objects[1])
        num_nuls = int(np.floor((begin - prev_end) / SEG_STEP)) if (begin - prev_end) % SEG_STEP < (SEG_STEP / 2) else int(np.ceil((begin - prev_end) / SEG_STEP))

        # add '1' from beginning of timestamp 'objects[0]' to 'objects[1]' end of time stamp
        num_ones = int(np.floor((end - begin) / SEG_STEP)) if (end - begin) % SEG_STEP < SEG_STEP / 2 else int(np.ceil((end - begin) / SEG_STEP))

        # if segments don't match actual number of segments at the end of time stamp, add difference to nuls
        segDiff = int(np.ceil((end / SEG_STEP) - (len(labs[count][1]) + num_nuls + num_ones)))
        if num_nuls + segDiff > 0:
            labs[count][1].extend(np.zeros(num_nuls + segDiff, dtype=int))
            labs[count][1].extend(np.ones(num_ones, dtype=int))
        else:
            labs[count][1].extend(np.zeros(num_nuls, dtype=int))
            labs[count][1].extend(np.ones(num_ones + segDiff, dtype=int))
        prev_end = end

    f_read.close()
    wavFile = "/home/komplike/bp/nahravky/drive/PD/TSK7/PD_M_02_TSK7.wav"
    sampleFreq, signal = wavfile.read(wavFile)
    signalLen = len(signal) / sampleFreq
    # if number of segments differs add zeros to the end
    # print(np.ceil(signalLen / SEG_STEP))
    # print(len(labs[count][1]))

    while np.ceil(signalLen / SEG_STEP) > len(labs[count][1]):
        labs[count][1].extend(np.zeros(1, dtype=int))
    count += 1
    return labs


def compare(orig, test):
    tp, tn, fp, fn = 0, 0, 0, 0
    # print(orig)
    # print(test)
    # exit()
    for i in range(len(orig)):
        orig_s = orig[i]
        test_s = test[i]

        if orig_s and test_s:
            tp += 1
        elif not orig_s and not test_s:
            tn += 1
        elif orig_s and not test_s:
            fn += 1
        else:
            fp += 1
    # print(tp, tn, fp, fn)
    return tp, tn, fp, fn


def comp_params(tp, tn, fp, fn):
    sens = tp / (tp + fn)
    spec = tn / (tn + fp)
    TPR = sens
    FPR = 1 - spec
    return TPR, FPR


if __name__ == '__main__':
    path = "/home/komplike/bp/nahravky/drive/PD/TSK7/"
    file = "PD_M_02_TSK7.wav"
    if file == "":
        wholeDir(path)
    else:
        mfcc, frame_len, frame_hop = singleFile(path, file)
        noise = loadNoise()
        mfccVAD(mfcc, noise, file, frame_len, frame_hop, th=44)
    print("DONE")
    # make_roc
    th_arr = np.arange(40, 50, 1)

    lab = score_labs("/home/komplike/bp/vysledky/PD_M_02_TSK7.lab", path, frame_len, frame_hop)
    # print(lab)
    # exit()
    fprs = []
    tprs = []
    for th in th_arr:
        mfccVAD(mfcc, noise, file, frame_len, frame_hop, th)
        test_lab = score_labs("PD_M_02_TSK7.lab", path, frame_len, frame_hop)
        # print(type(lab), len(lab), len(test_lab))
        # print(test_lab)
        tp, tn, fp, fn = compare(lab[0][1], test_lab[0][1])
        # print("th: ", th, " tp:", tp)
        # exit()
        tpr, fpr = comp_params(tp, tn, fp, fn)
        tprs.append(tpr)
        fprs.append(fpr)
    # return tprs, fprs
    tprs = np.sort(tprs)
    fprs = np.sort(fprs)
    print(tprs)
    print(fprs)
    # exit()
    plot_roc_curve(tprs, fprs)
